From: <Saved by Blink>
Snapshot-Content-Location: data:text/html, <html contenteditable>
Subject: 
Date: Wed, 3 Aug 2022 07:45:54 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--ilepjgVwes3jqCaSCwuh6f91plbKJGfsL0WtUWR5av----"


------MultipartBoundary--ilepjgVwes3jqCaSCwuh6f91plbKJGfsL0WtUWR5av----
Content-Type: text/html
Content-ID: <frame-3F047A52FF8887FE5FBDA476EE09AA9B@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: data:text/html, <html contenteditable>

<html contenteditable=3D""><head><meta http-equiv=3D"Content-Type" content=
=3D"text/html; charset=3Dwindows-1252"></head><body><div><br></div><div>htt=
ps://doc.rust-lang.org/book/ch12-03-improving-error-handling-and-modularity=
.html</div><div><table class=3D"ws-table-all" id=3D"customers" style=3D"box=
-sizing: inherit; border-collapse: collapse; border-spacing: 0px; width: 12=
46px; border: 1px solid rgb(204, 204, 204); margin: 20px 0px; font-family: =
arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"b=
ox-sizing: inherit;"><tr style=3D"box-sizing: inherit; border-bottom: 1px s=
olid rgb(221, 221, 221); background-color: rgb(255, 255, 255);"><th style=
=3D"box-sizing: inherit; padding: 8px; text-align: left; vertical-align: to=
p; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-height: 1.45em; =
font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16px; font-weigh=
t: 400;"><span class=3D"filename">Filename: src/main.rs</span></p><pre styl=
e=3D"position: relative; font-size: 16px; font-weight: 400;"><div class=3D"=
buttons" style=3D"position: absolute; z-index: 100; right: 5px; top: 5px; c=
olor: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa fa-copy clip=
-button" title=3D"Copy to clipboard" aria-label=3D"Copy to clipboard" style=
=3D"font-style: normal; font-variant: normal; font-weight: normal; font-str=
etch: normal; line-height: 1; font-family: FontAwesome; font-size: inherit;=
 -webkit-font-smoothing: antialiased; background-image: initial; background=
-position: initial; background-size: initial; background-repeat: initial; b=
ackground-attachment: initial; background-origin: initial; background-clip:=
 initial; border-width: initial; border-style: none; border-color: initial;=
 cursor: inherit;"><i class=3D"tooltiptext" style=3D"position: absolute; vi=
sibility: hidden; color: rgb(255, 255, 255); background-color: rgb(51, 51, =
51); transform: translateX(-50%); left: -8px; top: -35px; font-size: 0.8em;=
 border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px; z-index: 10=
00;"></i></button><button class=3D"fa fa-eye-slash" title=3D"Hide lines" ar=
ia-label=3D"Hide lines" style=3D"font-style: normal; font-variant: normal; =
font-weight: normal; font-stretch: normal; line-height: 1; font-family: Fon=
tAwesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgrou=
nd-image: initial; background-position: initial; background-size: initial; =
background-repeat: initial; background-attachment: initial; background-orig=
in: initial; background-clip: initial; border-width: initial; border-style:=
 none; border-color: initial; cursor: inherit;"></button></div><code class=
=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display: block;=
 overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-fam=
ily: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo,=
 &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span clas=
s=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> (query, filename) =3D parse_config(&amp;args);

    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, file=
name);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span>}
<br></code><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.=
875em; display: block; overflow-x: auto; background: rgb(246, 247, 246); pa=
dding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubu=
ntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !=
important;"><br></code><code class=3D"language-rust ignore hljs" style=3D"f=
ont-size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 2=
47, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consola=
s, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace,=
 monospace !important;"><br></code><code class=3D"language-rust ignore hljs=
" style=3D"font-size: 0.875em; display: block; overflow-x: auto; background=
: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&qu=
ot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;=
, monospace, monospace !important;">
<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">parse_config</span></span>(args: &amp;[<span class=3D"hljs-b=
uilt_in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; (&amp;<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, &am=
p;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span=
>) {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> query =3D &amp;args[<span class=3D"hljs-number" style=3D"color: rgb(178=
, 30, 0);">1</span>];
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> filename =3D &amp;args[<span class=3D"hljs-number" style=3D"color: rgb(=
178, 30, 0);">2</span>];

    (query, filename)
}
</code><div><br></div></pre></th><th style=3D"box-sizing: inherit; padding:=
 8px; text-align: left; vertical-align: top; border: 1px solid rgb(221, 221=
, 221);"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot=
;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename"=
>Filename: src/main.rs</span></p><pre style=3D"position: relative; font-siz=
e: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"position: absol=
ute; z-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: =
pointer;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboa=
rd" aria-label=3D"Copy to clipboard" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"><i class=3D"to=
oltiptext" style=3D"position: absolute; visibility: hidden; color: rgb(255,=
 255, 255); background-color: rgb(51, 51, 51); transform: translateX(-50%);=
 left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px=
 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=
=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=
=3D"font-style: normal; font-variant: normal; font-weight: normal; font-str=
etch: normal; line-height: 1; font-family: FontAwesome; font-size: inherit;=
 -webkit-font-smoothing: antialiased; background-image: initial; background=
-position: initial; background-size: initial; background-repeat: initial; b=
ackground-attachment: initial; background-origin: initial; background-clip:=
 initial; border-width: initial; border-style: none; border-color: initial;=
 cursor: inherit;"></button></div><code class=3D"language-rust should_panic=
 noplayground hljs" style=3D"font-size: 0.875em; display: block; overflow-x=
: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;=
Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;Deja=
Vu Sans Mono&quot;, monospace, monospace !important;"><span class=3D"boring=
" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(=
157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D parse_config(&amp;args);

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Sear=
ching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)
        .expect(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Something went wrong reading the file"</span>);

    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span>}

<span class=3D"hljs-class"><span class=3D"hljs-keyword" style=3D"color: rgb=
(157, 0, 236);">struct</span> <span class=3D"hljs-title" style=3D"color: rg=
b(0, 48, 242);">Config</span></span> {
    query: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
String</span>,
    filename: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
}

<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">parse_config</span></span>(args: &amp;[<span class=3D"hljs-b=
uilt_in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; Config {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30,=
 0);">1</span>].clone();
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">2</span>].clone();

    Config { query, filename }
}</code></pre></th></tr></tbody></table><table class=3D"ws-table-all" id=3D=
"customers" style=3D"box-sizing: inherit; border-collapse: collapse; border=
-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin:=
 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: =
15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inher=
it; border-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255,=
 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: le=
ft; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D=
"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-=
size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src/main.=
rs</span></p><pre style=3D"position: relative; font-size: 16px; font-weight=
: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 100; r=
ight: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button cl=
ass=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Co=
py to clipboard" style=3D"font-style: normal; font-variant: normal; font-we=
ight: normal; font-stretch: normal; line-height: 1; font-family: FontAwesom=
e; font-size: inherit; -webkit-font-smoothing: antialiased; background-imag=
e: initial; background-position: initial; background-size: initial; backgro=
und-repeat: initial; background-attachment: initial; background-origin: ini=
tial; background-clip: initial; border-width: initial; border-style: none; =
border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"=
position: absolute; visibility: hidden; color: rgb(255, 255, 255); backgrou=
nd-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -3=
5px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5p=
x 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" t=
itle=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; =
font-variant: normal; font-weight: normal; font-stretch: normal; line-heigh=
t: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoothing:=
 antialiased; background-image: initial; background-position: initial; back=
ground-size: initial; background-repeat: initial; background-attachment: in=
itial; background-origin: initial; background-clip: initial; border-width: =
initial; border-style: none; border-color: initial; cursor: inherit;"></but=
ton></div><code class=3D"language-rust should_panic noplayground hljs" styl=
e=3D"font-size: 0.875em; display: block; overflow-x: auto; background: rgb(=
246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, C=
onsolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, mono=
space, monospace !important;"><span class=3D"boring" style=3D"opacity: 0.6;=
"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span=
> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D parse_config(&amp;args);

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Sear=
ching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)
        .expect(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Something went wrong reading the file"</span>);

    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span>}

<span class=3D"hljs-class"><span class=3D"hljs-keyword" style=3D"color: rgb=
(157, 0, 236);">struct</span> <span class=3D"hljs-title" style=3D"color: rg=
b(0, 48, 242);">Config</span></span> {
    query: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
String</span>,
    filename: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
}
</code><code class=3D"language-rust should_panic noplayground hljs" style=
=3D"font-size: 0.875em; display: block; overflow-x: auto; background: rgb(2=
46, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Co=
nsolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monos=
pace, monospace !important;"><br></code><code class=3D"language-rust should=
_panic noplayground hljs" style=3D"font-size: 0.875em; display: block; over=
flow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: =
&quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quo=
t;DejaVu Sans Mono&quot;, monospace, monospace !important;"><br></code><cod=
e class=3D"language-rust should_panic noplayground hljs" style=3D"font-size=
: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246)=
; padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot=
;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospa=
ce !important;"><span class=3D"hljs-function"><span class=3D"hljs-keyword" =
style=3D"color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" sty=
le=3D"color: rgb(0, 48, 242);">parse_config</span></span>(args: &amp;[<span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>]) =
-&gt; Config {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30,=
 0);">1</span>].clone();
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">2</span>].clone();

    Config { query, filename }
}</code></pre></th><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/main.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-=
weight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: =
100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><but=
ton class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><code class=3D"language-rust should_panic noplayground hljs=
" style=3D"font-size: 0.875em; display: block; overflow-x: auto; background=
: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&qu=
ot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;=
, monospace, monospace !important;"><span class=3D"boring" style=3D"opacity=
: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use=
</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D Config::new(&amp;args);
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span>
    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
}

<span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --snip--<=
/span>

<span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-class"><=
span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struct</span=
> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Config</span=
></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl=
</span> Config {
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; Config {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">1</span>].clone();
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(1=
78, 30, 0);">2</span>].clone();

        Config { query, filename }
    }
}
</code><div><br></div></pre></th></tr></tbody></table><table class=3D"ws-ta=
ble-all" id=3D"customers" style=3D"box-sizing: inherit; border-collapse: co=
llapse; border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204,=
 204); margin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0=
); font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box=
-sizing: inherit; border-bottom: 1px solid rgb(221, 221, 221); background-c=
olor: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; =
text-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221)=
;"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, san=
s-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename">Filen=
ame: src/main.rs</span></p><pre style=3D"position: relative; font-size: 16p=
x; font-weight: 400;"><div class=3D"buttons" style=3D"position: absolute; z=
-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointe=
r;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" ar=
ia-label=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: n=
ormal; font-weight: normal; font-stretch: normal; line-height: 1; font-fami=
ly: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialiased; b=
ackground-image: initial; background-position: initial; background-size: in=
itial; background-repeat: initial; background-attachment: initial; backgrou=
nd-origin: initial; background-clip: initial; border-width: initial; border=
-style: none; border-color: initial; cursor: inherit;"><i class=3D"tooltipt=
ext" style=3D"position: absolute; visibility: hidden; color: rgb(255, 255, =
255); background-color: rgb(51, 51, 51); transform: translateX(-50%); left:=
 -8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; =
margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa f=
a-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-s=
tyle: normal; font-variant: normal; font-weight: normal; font-stretch: norm=
al; line-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-f=
ont-smoothing: antialiased; background-image: initial; background-position:=
 initial; background-size: initial; background-repeat: initial; background-=
attachment: initial; background-origin: initial; background-clip: initial; =
border-width: initial; border-style: none; border-color: initial; cursor: i=
nherit;"></button></div><code class=3D"language-rust should_panic noplaygro=
und hljs" style=3D"font-size: 0.875em; display: block; overflow-x: auto; ba=
ckground: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Cod=
e Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mo=
no&quot;, monospace, monospace !important;"><span class=3D"boring" style=3D=
"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 23=
6);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D Config::new(&amp;args);
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span>
    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
}

<span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --snip--<=
/span>

<span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-class"><=
span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struct</span=
> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Config</span=
></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl=
</span> Config {
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; Config {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">1</span>].clone();
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(1=
78, 30, 0);">2</span>].clone();

        Config { query, filename }
    }
}
</code><div><br></div></pre></th><th style=3D"box-sizing: inherit; padding:=
 8px; text-align: left; vertical-align: top; border: 1px solid rgb(221, 221=
, 221);"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot=
;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename"=
>Filename: src/main.rs</span></p><pre style=3D"position: relative; font-siz=
e: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"position: absol=
ute; z-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: =
pointer;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboa=
rd" aria-label=3D"Copy to clipboard" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"><i class=3D"to=
oltiptext" style=3D"position: absolute; visibility: hidden; color: rgb(255,=
 255, 255); background-color: rgb(51, 51, 51); transform: translateX(-50%);=
 left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px=
 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=
=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=
=3D"font-style: normal; font-variant: normal; font-weight: normal; font-str=
etch: normal; line-height: 1; font-family: FontAwesome; font-size: inherit;=
 -webkit-font-smoothing: antialiased; background-image: initial; background=
-position: initial; background-size: initial; background-repeat: initial; b=
ackground-attachment: initial; background-origin: initial; background-clip:=
 initial; border-width: initial; border-style: none; border-color: initial;=
 cursor: inherit;"></button></div><code class=3D"language-rust ignore hljs"=
 style=3D"font-size: 0.875em; display: block; overflow-x: auto; background:=
 rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quo=
t;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;,=
 monospace, monospace !important;"><span class=3D"boring" style=3D"opacity:=
 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use<=
/span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">main</=
span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span cl=
ass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =
=3D env::args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span>    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">/=
/ --snip--</span>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; Config {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> args.len() &lt; <span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">3</span> {
            <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);"=
>panic!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);"=
>"not enough arguments"</span>);
        }
        <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// -=
-snip--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        Config { quer=
y, filename }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table></div><div><div><br><table class=3D"ws-table-all"=
 id=3D"customers" style=3D"box-sizing: inherit; border-collapse: collapse; =
border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); m=
argin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-=
size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing:=
 inherit; border-bottom: 1px solid rgb(221, 221, 221); background-color: rg=
b(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/main.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-=
weight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: =
100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><but=
ton class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><code class=3D"language-rust ignore hljs" style=3D"font-siz=
e: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246=
); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quo=
t;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monosp=
ace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">main</=
span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span cl=
ass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =
=3D env::args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span>    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">/=
/ --snip--</span>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; Config {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> args.len() &lt; <span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">3</span> {
            <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);"=
>panic!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);"=
>"not enough arguments"</span>);
        }
        <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// -=
-snip--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        Config { quer=
y, filename }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><div class=3D"ferris-container" style=3D"position: absolute; z-index: 99;=
 right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org/book/ch00-00-=
introduction.html#ferris" target=3D"_blank" style=3D"text-decoration-line: =
none;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/does_not_compi=
le.svg" title=3D"This code does not compile!" class=3D"ferris ferris-large"=
 style=3D"vertical-align: top; margin-left: 0.2em; height: auto; width: 4.5=
em; max-width: 100%;"></a></div><code class=3D"language-rust ignore does_no=
t_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: au=
to; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sour=
ce Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu S=
ans Mono&quot;, monospace, monospace !important;"><span class=3D"boring" st=
yle=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157,=
 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">main</=
span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span cl=
ass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =
=3D env::args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl=
</span> Config {
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &=
amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</s=
pan> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</s=
pan>&gt; {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> args.len() &lt; <span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">3</span> {
            <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);"=
>return</span> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0)=
;">Err</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">=
"not enough arguments"</span>);
        }

        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">1</span>].clone();
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(1=
78, 30, 0);">2</span>].clone();

        <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</=
span>(Config { query, filename })
    }
}
</code><div><br></div></pre></th></tr></tbody></table><br></div><div><div><=
table class=3D"ws-table-all" id=3D"customers" style=3D"box-sizing: inherit;=
 border-collapse: collapse; border-spacing: 0px; width: 1246px; border: 1px=
 solid rgb(204, 204, 204); margin: 20px 0px; font-family: arial, sans-serif=
; color: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"box-sizing: inheri=
t;"><tr style=3D"box-sizing: inherit; border-bottom: 1px solid rgb(221, 221=
, 221); background-color: rgb(255, 255, 255);"><th style=3D"box-sizing: inh=
erit; padding: 8px; text-align: left; vertical-align: top; border: 1px soli=
d rgb(221, 221, 221);"><p style=3D"line-height: 1.45em; font-family: &quot;=
Open Sans&quot;, sans-serif; font-size: 16px; font-weight: 400;"><span clas=
s=3D"filename">Filename: src/main.rs</span></p><pre style=3D"position: rela=
tive; font-size: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"p=
osition: absolute; z-index: 100; right: 5px; top: 5px; color: var(--sidebar=
-fg); cursor: pointer;"><button class=3D"fa fa-copy clip-button" title=3D"C=
opy to clipboard" aria-label=3D"Copy to clipboard" style=3D"font-style: nor=
mal; font-variant: normal; font-weight: normal; font-stretch: normal; line-=
height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoot=
hing: antialiased; background-image: initial; background-position: initial;=
 background-size: initial; background-repeat: initial; background-attachmen=
t: initial; background-origin: initial; background-clip: initial; border-wi=
dth: initial; border-style: none; border-color: initial; cursor: inherit;">=
<i class=3D"tooltiptext" style=3D"position: absolute; visibility: hidden; c=
olor: rgb(255, 255, 255); background-color: rgb(51, 51, 51); transform: tra=
nslateX(-50%); left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px=
; padding: 5px 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><=
button class=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide li=
nes" style=3D"font-style: normal; font-variant: normal; font-weight: normal=
; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-size=
: inherit; -webkit-font-smoothing: antialiased; background-image: initial; =
background-position: initial; background-size: initial; background-repeat: =
initial; background-attachment: initial; background-origin: initial; backgr=
ound-clip: initial; border-width: initial; border-style: none; border-color=
: initial; cursor: inherit;"></button></div><div class=3D"ferris-container"=
 style=3D"position: absolute; z-index: 99; right: 5px; top: 30px;"><a href=
=3D"https://doc.rust-lang.org/book/ch00-00-introduction.html#ferris" target=
=3D"_blank" style=3D"text-decoration-line: none;"><img src=3D"https://doc.r=
ust-lang.org/book/img/ferris/does_not_compile.svg" title=3D"This code does =
not compile!" class=3D"ferris ferris-large" style=3D"vertical-align: top; m=
argin-left: 0.2em; height: auto; width: 4.5em; max-width: 100%;"></a></div>=
<code class=3D"language-rust ignore does_not_compile hljs" style=3D"font-si=
ze: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 24=
6); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &qu=
ot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monos=
pace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><span clas=
s=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;</span></code=
><code class=3D"language-rust ignore does_not_compile hljs" style=3D"font-s=
ize: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 2=
46); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &q=
uot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, mono=
space !important;"><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">main</=
span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span cl=
ass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =
=3D env::args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args);</span></code><code class=3D"language-rust ignore does_not=
_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: aut=
o; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sourc=
e Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sa=
ns Mono&quot;, monospace, monospace !important;"><span class=3D"boring" sty=
le=3D"opacity: 0.6;"><br></span></code><code class=3D"language-rust ignore =
does_not_compile hljs" style=3D"font-size: 0.875em; display: block; overflo=
w-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: &qu=
ot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;D=
ejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D"bor=
ing" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl=
</span> Config {
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &=
amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</s=
pan> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</s=
pan>&gt; {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> args.len() &lt; <span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">3</span> {
            <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);"=
>return</span> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0)=
;">Err</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">=
"not enough arguments"</span>);
        }

        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">1</span>].clone();
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(1=
78, 30, 0);">2</span>].clone();

        <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</=
span>(Config { query, filename })
    }
}
</code><div><br></div></pre></th><th style=3D"box-sizing: inherit; padding:=
 8px; text-align: left; vertical-align: top; border: 1px solid rgb(221, 221=
, 221);"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot=
;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename"=
>Filename: src/main.rs</span></p><pre style=3D"position: relative; font-siz=
e: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"position: absol=
ute; z-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: =
pointer;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboa=
rd" aria-label=3D"Copy to clipboard" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"><i class=3D"to=
oltiptext" style=3D"position: absolute; visibility: hidden; color: rgb(255,=
 255, 255); background-color: rgb(51, 51, 51); transform: translateX(-50%);=
 left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px=
 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=
=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=
=3D"font-style: normal; font-variant: normal; font-weight: normal; font-str=
etch: normal; line-height: 1; font-family: FontAwesome; font-size: inherit;=
 -webkit-font-smoothing: antialiased; background-image: initial; background=
-position: initial; background-size: initial; background-repeat: initial; b=
ackground-attachment: initial; background-origin: initial; background-clip:=
 initial; border-width: initial; border-style: none; border-color: initial;=
 cursor: inherit;"></button></div><code class=3D"language-rust ignore hljs"=
 style=3D"font-size: 0.875em; display: block; overflow-x: auto; background:=
 rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quo=
t;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;,=
 monospace, monospace !important;"><span class=3D"boring" style=3D"opacity:=
 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use<=
/span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use<=
/span> std::process;

<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D Config::new(&amp;args).unwrap_or_else(|err| {
        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">pri=
ntln!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
Problem parsing arguments: {}"</span>, err);
        process::exit(<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">1</span>);
    });

    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use<=
/span> std::process;

<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D Config::new(&amp;args).unwrap_or_else(|err| {
        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">pri=
ntln!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
Problem parsing arguments: {}"</span>, err);
        process::exit(<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">1</span>);
    });
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        .expect(<span=
 class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Something went wro=
ng reading the file"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display=
: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; =
font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;=
, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><s=
pan class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=
=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display: block;=
 overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-fam=
ily: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo,=
 &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span clas=
s=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
println!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Searching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    run(config);
}

<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">run</span></span>(config: Config) {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)
        .expect(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Something went wrong reading the file"</span>);

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With=
 text:\n{}"</span>, contents);
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display=
: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; =
font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;=
, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><s=
pan class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
println!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Searching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    run(config);
}
</code><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><br></code><code class=3D"language-rust ignore hljs" style=3D"font-=
size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, =
246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &=
quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, mon=
ospace !important;"><span class=3D"hljs-function"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title"=
 style=3D"color: rgb(0, 48, 242);">run</span></span>(config: Config) {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)
        .expect(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Something went wrong reading the file"</span>);

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With=
 text:\n{}"</span>, contents);
}

<span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --snip--<=
/span>
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use<=
/span> std::error::Error;


<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">main</=
span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span cl=
ass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =
=3D env::args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    run(config);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <=
span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&l=
t;<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span=
> Error&gt;&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)?;

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With=
 text:\n{}"</span>, contents);

    <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span=
>(())
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table></div><div><div><div><br style=3D"font-family: ar=
ial, sans-serif; font-size: 15px; font-weight: 700; background-color: rgb(2=
55, 255, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"c=
ustomers" style=3D"box-sizing: inherit; border-collapse: collapse; border-s=
pacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 2=
0px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15=
px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit=
; border-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 2=
55, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left=
; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"l=
ine-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-si=
ze: 16px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs=
</span></p><pre style=3D"position: relative; font-size: 16px; font-weight: =
400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 100; rig=
ht: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button clas=
s=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy=
 to clipboard" style=3D"font-style: normal; font-variant: normal; font-weig=
ht: normal; font-stretch: normal; line-height: 1; font-family: FontAwesome;=
 font-size: inherit; -webkit-font-smoothing: antialiased; background-image:=
 initial; background-position: initial; background-size: initial; backgroun=
d-repeat: initial; background-attachment: initial; background-origin: initi=
al; background-clip: initial; border-width: initial; border-style: none; bo=
rder-color: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"po=
sition: absolute; visibility: hidden; color: rgb(255, 255, 255); background=
-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35p=
x; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px =
5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" tit=
le=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; fo=
nt-variant: normal; font-weight: normal; font-stretch: normal; line-height:=
 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: a=
ntialiased; background-image: initial; background-position: initial; backgr=
ound-size: initial; background-repeat: initial; background-attachment: init=
ial; background-origin: initial; background-clip: initial; border-width: in=
itial; border-style: none; border-color: initial; cursor: inherit;"></butto=
n></div><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875=
em; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddi=
ng: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu=
 Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !imp=
ortant;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs=
-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;</span><span =
class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=3D"l=
anguage-rust ignore hljs" style=3D"font-size: 0.875em; display: block; over=
flow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: =
&quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quo=
t;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D"=
boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args);</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
println!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Searching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    run(config);
}
</code><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><br></code><code class=3D"language-rust ignore hljs" style=3D"font-=
size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, =
246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &=
quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, mon=
ospace !important;"><span class=3D"hljs-function"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title"=
 style=3D"color: rgb(0, 48, 242);">run</span></span>(config: Config) {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)
        .expect(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Something went wrong reading the file"</span>);

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With=
 text:\n{}"</span>, contents);
}

<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; Config {</span><span class=3D"boring=
" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        Config { quer=
y, filename }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><br></p></th></tr></tbody></table></div></div></div>=
<div><div><table class=3D"ws-table-all" id=3D"customers" style=3D"box-sizin=
g: inherit; border-collapse: collapse; border-spacing: 0px; width: 1246px; =
border: 1px solid rgb(204, 204, 204); margin: 20px 0px; font-family: arial,=
 sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"box-siz=
ing: inherit;"><tr style=3D"box-sizing: inherit; border-bottom: 1px solid r=
gb(221, 221, 221); background-color: rgb(255, 255, 255);"><th style=3D"box-=
sizing: inherit; padding: 8px; text-align: left; vertical-align: top; borde=
r: 1px solid rgb(221, 221, 221);"><p style=3D"line-height: 1.45em; font-fam=
ily: &quot;Open Sans&quot;, sans-serif; font-size: 16px; font-weight: 400;"=
><span class=3D"filename">Filename: src/main.rs</span></p><pre style=3D"pos=
ition: relative; font-size: 16px; font-weight: 400;"><div class=3D"buttons"=
 style=3D"position: absolute; z-index: 100; right: 5px; top: 5px; color: va=
r(--sidebar-fg); cursor: pointer;"><button class=3D"fa fa-copy clip-button"=
 title=3D"Copy to clipboard" aria-label=3D"Copy to clipboard" style=3D"font=
-style: normal; font-variant: normal; font-weight: normal; font-stretch: no=
rmal; line-height: 1; font-family: FontAwesome; font-size: inherit; -webkit=
-font-smoothing: antialiased; background-image: initial; background-positio=
n: initial; background-size: initial; background-repeat: initial; backgroun=
d-attachment: initial; background-origin: initial; background-clip: initial=
; border-width: initial; border-style: none; border-color: initial; cursor:=
 inherit;"><i class=3D"tooltiptext" style=3D"position: absolute; visibility=
: hidden; color: rgb(255, 255, 255); background-color: rgb(51, 51, 51); tra=
nsform: translateX(-50%); left: -8px; top: -35px; font-size: 0.8em; border-=
radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i=
></button><button class=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=
=3D"Hide lines" style=3D"font-style: normal; font-variant: normal; font-wei=
ght: normal; font-stretch: normal; line-height: 1; font-family: FontAwesome=
; font-size: inherit; -webkit-font-smoothing: antialiased; background-image=
: initial; background-position: initial; background-size: initial; backgrou=
nd-repeat: initial; background-attachment: initial; background-origin: init=
ial; background-clip: initial; border-width: initial; border-style: none; b=
order-color: initial; cursor: inherit;"></button></div><code class=3D"langu=
age-rust ignore hljs" style=3D"font-size: 0.875em; display: block; overflow=
-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quo=
t;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;De=
jaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D"bori=
ng" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rg=
b(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use<=
/span> std::error::Error;
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">main</=
span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span cl=
ass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =
=3D env::args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    run(config);
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code><code =
class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display: b=
lock; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; fon=
t-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, M=
enlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span=
 class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=3D"=
language-rust ignore hljs" style=3D"font-size: 0.875em; display: block; ove=
rflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family:=
 &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &qu=
ot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D=
"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <=
span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&l=
t;<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span=
> Error&gt;&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)?;

    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With=
 text:\n{}"</span>, contents);

    <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span=
>(())
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
println!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Searching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</spa=
n> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</spa=
n> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span=
>(e) =3D run(config) {
        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">pri=
ntln!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
Application error: {}"</span>, e);

        process::exit(<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">1</span>);
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;">=
<div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5p=
x; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"f=
a fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cl=
ipboard" style=3D"font-style: normal; font-variant: normal; font-weight: no=
rmal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-=
size: inherit; -webkit-font-smoothing: antialiased; background-image: initi=
al; background-position: initial; background-size: initial; background-repe=
at: initial; background-attachment: initial; background-origin: initial; ba=
ckground-clip: initial; border-width: initial; border-style: none; border-c=
olor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position=
: absolute; visibility: hidden; color: rgb(255, 255, 255); background-color=
: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; fon=
t-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8p=
x; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"=
Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-var=
iant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fo=
nt-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antiali=
ased; background-image: initial; background-position: initial; background-s=
ize: initial; background-repeat: initial; background-attachment: initial; b=
ackground-origin: initial; background-clip: initial; border-width: initial;=
 border-style: none; border-color: initial; cursor: inherit;"></button></di=
v><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywo=
rd" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>

<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
println!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"Searching for {}"</span>, config.query);
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println=
!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In f=
ile {}"</span>, config.filename);

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</spa=
n> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</spa=
n> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span=
>(e) =3D run(config) {
        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">pri=
ntln!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
Application error: {}"</span>, e);

        process::exit(<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">1</span>);
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display=
: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; =
font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;=
, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><s=
pan class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=
=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display: block;=
 overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-fam=
ily: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo,=
 &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span clas=
s=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=3D"langu=
age-rust ignore hljs" style=3D"font-size: 0.875em; display: block; overflow=
-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quo=
t;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;De=
jaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D"bori=
ng" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code><code =
class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display: b=
lock; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; fon=
t-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, M=
enlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span=
 class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=3D"=
language-rust ignore hljs" style=3D"font-size: 0.875em; display: block; ove=
rflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family:=
 &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &qu=
ot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D=
"boring" style=3D"opacity: 0.6;"><span class=3D"boring" style=3D"opacity: 0=
.6;"><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"co=
lor: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color=
: rgb(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&lt;<s=
pan class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span> Er=
ror&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></span></code=
></pre></th><th style=3D"box-sizing: inherit; padding: 8px; text-align: lef=
t; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"=
line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-s=
ize: 16px; font-weight: 400;"><span class=3D"filename">Filename: src/main.r=
s</span></p><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&q=
uot;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filena=
me"></span></p><pre style=3D"position: relative; font-size: 16px; font-weig=
ht: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 100;=
 right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button =
class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"=
Copy to clipboard" style=3D"font-style: normal; font-variant: normal; font-=
weight: normal; font-stretch: normal; line-height: 1; font-family: FontAwes=
ome; font-size: inherit; -webkit-font-smoothing: antialiased; background-im=
age: initial; background-position: initial; background-size: initial; backg=
round-repeat: initial; background-attachment: initial; background-origin: i=
nitial; background-clip: initial; border-width: initial; border-style: none=
; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" style=
=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); back=
ground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top=
: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5p=
x 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slas=
h" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: norm=
al; font-variant: normal; font-weight: normal; font-stretch: normal; line-h=
eight: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smooth=
ing: antialiased; background-image: initial; background-position: initial; =
background-size: initial; background-repeat: initial; background-attachment=
: initial; background-origin: initial; background-clip: initial; border-wid=
th: initial; border-style: none; border-color: initial; cursor: inherit;"><=
/button></div><code class=3D"language-rust ignore hljs" style=3D"font-size:=
 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246);=
 padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;=
Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospac=
e !important;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236=
);">use</span> std::env;
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> =
std::process;

<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> =
minigrep::Config;

<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// --sni=
p--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">=
if</span> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">l=
et</span> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Er=
r</span>(e) =3D minigrep::run(config) {
        <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// -=
-snip--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">        <span class=3D"hljs-=
built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=3D"=
hljs-string" style=3D"color: rgb(0, 130, 0);">"Application error: {}"</span=
>, e);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span>    }
}</code></pre><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans=
&quot;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"file=
name">Filename: src/lib.rs</span></p><pre style=3D"position: relative; font=
-size: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"position: a=
bsolute; z-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); curs=
or: pointer;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to cli=
pboard" aria-label=3D"Copy to clipboard" style=3D"font-style: normal; font-=
variant: normal; font-weight: normal; font-stretch: normal; line-height: 1;=
 font-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: anti=
aliased; background-image: initial; background-position: initial; backgroun=
d-size: initial; background-repeat: initial; background-attachment: initial=
; background-origin: initial; background-clip: initial; border-width: initi=
al; border-style: none; border-color: initial; cursor: inherit;"><i class=
=3D"tooltiptext" style=3D"position: absolute; visibility: hidden; color: rg=
b(255, 255, 255); background-color: rgb(51, 51, 51); transform: translateX(=
-50%); left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px; paddin=
g: 5px 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button c=
lass=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" sty=
le=3D"font-style: normal; font-variant: normal; font-weight: normal; font-s=
tretch: normal; line-height: 1; font-family: FontAwesome; font-size: inheri=
t; -webkit-font-smoothing: antialiased; background-image: initial; backgrou=
nd-position: initial; background-size: initial; background-repeat: initial;=
 background-attachment: initial; background-origin: initial; background-cli=
p: initial; border-width: initial; border-style: none; border-color: initia=
l; cursor: inherit;"></button></div><div class=3D"ferris-container" style=
=3D"position: absolute; z-index: 99; right: 5px; top: 30px;"><a href=3D"htt=
ps://doc.rust-lang.org/book/ch00-00-introduction.html#ferris" target=3D"_bl=
ank" style=3D"text-decoration-line: none;"><img src=3D"https://doc.rust-lan=
g.org/book/img/ferris/does_not_compile.svg" title=3D"This code does not com=
pile!" class=3D"ferris ferris-large" style=3D"vertical-align: top; margin-l=
eft: 0.2em; height: auto; width: 4.5em; max-width: 100%;"></a></div><code c=
lass=3D"language-rust ignore does_not_compile hljs" style=3D"font-size: 0.8=
75em; display: block; overflow-x: auto; background: rgb(246, 247, 246); pad=
ding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubun=
tu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !i=
mportant;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">=
use</span> std::error::Error;
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> =
std::fs;
<br></code><code class=3D"language-rust ignore does_not_compile hljs" style=
=3D"font-size: 0.875em; display: block; overflow-x: auto; background: rgb(2=
46, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Co=
nsolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monos=
pace, monospace !important;"><span class=3D"hljs-keyword" style=3D"font-siz=
e: 0.875em; color: rgb(157, 0, 236);">pub</span><span style=3D"font-size: 0=
.875em;"> </span><span class=3D"hljs-class" style=3D"font-size: 0.875em;"><=
span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struct</span=
> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Config</span=
></span><span style=3D"font-size: 0.875em;"> {</span></code><code class=3D"=
language-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;">    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> query: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> filename: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
}

<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl</span>=
 Config {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &=
amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</s=
pan> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</s=
pan>&gt; {
        <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// -=
-snip--</span>
<span class=3D"boring" style=3D"opacity: 0.6;">        <span class=3D"hljs-=
keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &lt; <span=
 class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span>    }
}

<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> =
<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=3D"hljs-=
built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span c=
lass=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span> Error&g=
t;&gt; {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::read_to=
_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span>}</code></pre></th></tr></tbody></table><br></div><div><br style=3D"=
font-family: arial, sans-serif; font-size: 15px; font-weight: 700; backgrou=
nd-color: rgb(255, 255, 255);"></div></div><div><div><table class=3D"ws-tab=
le-all" id=3D"customers" style=3D"box-sizing: inherit; border-collapse: col=
lapse; border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, =
204); margin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0)=
; font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-=
sizing: inherit; border-bottom: 1px solid rgb(221, 221, 221); background-co=
lor: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; t=
ext-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);=
"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans=
-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename">Filena=
me: src/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px;=
 font-weight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-i=
ndex: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;=
"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria=
-label=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: nor=
mal; font-weight: normal; font-stretch: normal; line-height: 1; font-family=
: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialiased; bac=
kground-image: initial; background-position: initial; background-size: init=
ial; background-repeat: initial; background-attachment: initial; background=
-origin: initial; background-clip: initial; border-width: initial; border-s=
tyle: none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptex=
t" style=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 25=
5); background-color: rgb(51, 51, 51); transform: translateX(-50%); left: -=
8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; ma=
rgin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-=
eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-sty=
le: normal; font-variant: normal; font-weight: normal; font-stretch: normal=
; line-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-fon=
t-smoothing: antialiased; background-image: initial; background-position: i=
nitial; background-size: initial; background-repeat: initial; background-at=
tachment: initial; background-origin: initial; background-clip: initial; bo=
rder-width: initial; border-style: none; border-color: initial; cursor: inh=
erit;"></button></div><div class=3D"ferris-container" style=3D"position: ab=
solute; z-index: 99; right: 5px; top: 30px;"><a href=3D"https://doc.rust-la=
ng.org/book/ch00-00-introduction.html#ferris" target=3D"_blank" style=3D"te=
xt-decoration-line: none;"><img src=3D"https://doc.rust-lang.org/book/img/f=
erris/does_not_compile.svg" title=3D"This code does not compile!" class=3D"=
ferris ferris-large" style=3D"vertical-align: top; margin-left: 0.2em; heig=
ht: auto; width: 4.5em; max-width: 100%;"></a></div><code class=3D"language=
-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em; display: b=
lock; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; fon=
t-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, M=
enlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span=
 class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::=
error::Error;
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> =
std::fs;
<br></code><code class=3D"language-rust ignore does_not_compile hljs" style=
=3D"font-size: 0.875em; display: block; overflow-x: auto; background: rgb(2=
46, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Co=
nsolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monos=
pace, monospace !important;"><span class=3D"hljs-keyword" style=3D"font-siz=
e: 0.875em; color: rgb(157, 0, 236);">pub</span><span style=3D"font-size: 0=
.875em;"> </span><span class=3D"hljs-class" style=3D"font-size: 0.875em;"><=
span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struct</span=
> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Config</span=
></span><span style=3D"font-size: 0.875em;"> {</span></code><code class=3D"=
language-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em; di=
splay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.=
5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&=
quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important=
;">    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> query: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> filename: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
}

<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl</span>=
 Config {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &=
amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</s=
pan> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</s=
pan>&gt; {
<span class=3D"boring" style=3D"opacity: 0.6;">        <span class=3D"hljs-=
keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &lt; <span=
 class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span>    }
}

<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> =
<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=3D"hljs-=
built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span c=
lass=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span> Error&g=
t;&gt; {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::read_to=
_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"With text:\n{}"</span>, =
contents);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span>}</code></pre></th><th style=3D"box-sizing: inherit; padding: 8px; t=
ext-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);=
"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans=
-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename">Filena=
me: src/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px;=
 font-weight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-i=
ndex: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;=
"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria=
-label=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: nor=
mal; font-weight: normal; font-stretch: normal; line-height: 1; font-family=
: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialiased; bac=
kground-image: initial; background-position: initial; background-size: init=
ial; background-repeat: initial; background-attachment: initial; background=
-origin: initial; background-clip: initial; border-width: initial; border-s=
tyle: none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptex=
t" style=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 25=
5); background-color: rgb(51, 51, 51); transform: translateX(-50%); left: -=
8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; ma=
rgin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-=
eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-sty=
le: normal; font-variant: normal; font-weight: normal; font-stretch: normal=
; line-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-fon=
t-smoothing: antialiased; background-image: initial; background-position: i=
nitial; background-size: initial; background-repeat: initial; background-at=
tachment: initial; background-origin: initial; background-clip: initial; bo=
rder-width: initial; border-style: none; border-color: initial; cursor: inh=
erit;"></button></div><div class=3D"ferris-container" style=3D"position: ab=
solute; z-index: 99; right: 5px; top: 30px;"><a href=3D"https://doc.rust-la=
ng.org/book/ch00-00-introduction.html#ferris" target=3D"_blank" style=3D"te=
xt-decoration-line: none;"><img src=3D"https://doc.rust-lang.org/book/img/f=
erris/does_not_compile.svg" title=3D"This code does not compile!" class=3D"=
ferris ferris-large" style=3D"vertical-align: top; margin-left: 0.2em; heig=
ht: auto; width: 4.5em; max-width: 100%;"></a></div><code class=3D"language=
-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em; display: b=
lock; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; fon=
t-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, M=
enlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span=
 class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" styl=
e=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore does_not_compile hljs" style=3D"font-size:=
 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246);=
 padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;=
Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospac=
e !important;"><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[cfg(te=
st)]</span>
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mod</span> =
tests {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</sp=
an> super::*;

    <span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[test]</sp=
an>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">one_result</span></span>() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"duct"</span>;
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> contents =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130=
, 0);">"\
Rust:
safe, fast, productive.
Pick three."</span>;

        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">ass=
ert_eq!</span>(<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0=
);">vec!</span>[<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"safe, fast, productive."</span>], search(query, contents));
    }
}
</code><div><br></div></pre></th></tr></tbody></table><br></div><div><br st=
yle=3D"font-family: arial, sans-serif; font-size: 15px; font-weight: 700; b=
ackground-color: rgb(255, 255, 255);"></div></div><div><div><table class=3D=
"ws-table-all" id=3D"customers" style=3D"box-sizing: inherit; border-collap=
se: collapse; border-spacing: 0px; width: 1246px; border: 1px solid rgb(204=
, 204, 204); margin: 20px 0px; font-family: arial, sans-serif; color: rgb(0=
, 0, 0); font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=
=3D"box-sizing: inherit; border-bottom: 1px solid rgb(221, 221, 221); backg=
round-color: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; padding=
: 8px; text-align: left; vertical-align: top; border: 1px solid rgb(221, 22=
1, 221);"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quo=
t;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename=
">Filename: src/lib.rs</span></p><pre style=3D"position: relative; font-siz=
e: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"position: absol=
ute; z-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: =
pointer;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboa=
rd" aria-label=3D"Copy to clipboard" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"><i class=3D"to=
oltiptext" style=3D"position: absolute; visibility: hidden; color: rgb(255,=
 255, 255); background-color: rgb(51, 51, 51); transform: translateX(-50%);=
 left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px=
 8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=
=3D"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=
=3D"font-style: normal; font-variant: normal; font-weight: normal; font-str=
etch: normal; line-height: 1; font-family: FontAwesome; font-size: inherit;=
 -webkit-font-smoothing: antialiased; background-image: initial; background=
-position: initial; background-size: initial; background-repeat: initial; b=
ackground-attachment: initial; background-origin: initial; background-clip:=
 initial; border-width: initial; border-style: none; border-color: initial;=
 cursor: inherit;"></button></div><div class=3D"ferris-container" style=3D"=
position: absolute; z-index: 99; right: 5px; top: 30px;"><a href=3D"https:/=
/doc.rust-lang.org/book/ch00-00-introduction.html#ferris" target=3D"_blank"=
 style=3D"text-decoration-line: none;"><img src=3D"https://doc.rust-lang.or=
g/book/img/ferris/does_not_compile.svg" title=3D"This code does not compile=
!" class=3D"ferris ferris-large" style=3D"vertical-align: top; margin-left:=
 0.2em; height: auto; width: 4.5em; max-width: 100%;"></a></div><code class=
=3D"language-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em=
; display: block; overflow-x: auto; background: rgb(246, 247, 246); padding=
: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu M=
ono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impor=
tant;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code><code =
class=3D"language-rust ignore does_not_compile hljs" style=3D"font-size: 0.=
875em; display: block; overflow-x: auto; background: rgb(246, 247, 246); pa=
dding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubu=
ntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !=
important;"><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></cod=
e><code class=3D"language-rust ignore does_not_compile hljs" style=3D"font-=
size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, =
246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &=
quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, mon=
ospace !important;"><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[cfg(te=
st)]</span>
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mod</span> =
tests {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</sp=
an> super::*;

    <span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[test]</sp=
an>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">one_result</span></span>() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"duct"</span>;
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> contents =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130=
, 0);">"\
Rust:
safe, fast, productive.
Pick three."</span>;

        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">ass=
ert_eq!</span>(<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0=
);">vec!</span>[<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"safe, fast, productive."</span>], search(query, contents));
    }
}
</code><div><br></div></pre></th><th style=3D"box-sizing: inherit; padding:=
 8px; text-align: left; vertical-align: top; border: 1px solid rgb(221, 221=
, 221);"><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot=
;, sans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename"=
>Filename: src/lib.rs</span></p><pre style=3D"position: relative; font-size=
: 16px; font-weight: 400;"><div class=3D"buttons" style=3D"position: absolu=
te; z-index: 100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: p=
ointer;"><button class=3D"fa fa-copy clip-button" title=3D"Copy to clipboar=
d" aria-label=3D"Copy to clipboard" style=3D"font-style: normal; font-varia=
nt: normal; font-weight: normal; font-stretch: normal; line-height: 1; font=
-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialias=
ed; background-image: initial; background-position: initial; background-siz=
e: initial; background-repeat: initial; background-attachment: initial; bac=
kground-origin: initial; background-clip: initial; border-width: initial; b=
order-style: none; border-color: initial; cursor: inherit;"><i class=3D"too=
ltiptext" style=3D"position: absolute; visibility: hidden; color: rgb(255, =
255, 255); background-color: rgb(51, 51, 51); transform: translateX(-50%); =
left: -8px; top: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px =
8px; margin: 5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D=
"fa fa-eye-slash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"f=
ont-style: normal; font-variant: normal; font-weight: normal; font-stretch:=
 normal; line-height: 1; font-family: FontAwesome; font-size: inherit; -web=
kit-font-smoothing: antialiased; background-image: initial; background-posi=
tion: initial; background-size: initial; background-repeat: initial; backgr=
ound-attachment: initial; background-origin: initial; background-clip: init=
ial; border-width: initial; border-style: none; border-color: initial; curs=
or: inherit;"></button></div><code class=3D"language-rust noplayground hljs=
" style=3D"font-size: 0.875em; display: block; overflow-x: auto; background=
: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&qu=
ot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;=
, monospace, monospace !important;"><span class=3D"boring" style=3D"opacity=
: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use=
</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</s=
pan>[]
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><code class=3D"language-rust noplayground hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-=
keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</s=
pan>[]
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><div class=3D"ferris-container" style=3D"position: absolute; z-index: 99; =
right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org/book/ch00-00-i=
ntroduction.html#ferris" target=3D"_blank" style=3D"text-decoration-line: n=
one;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/does_not_compil=
e.svg" title=3D"This code does not compile!" class=3D"ferris ferris-large" =
style=3D"vertical-align: top; margin-left: 0.2em; height: auto; width: 4.5e=
m; max-width: 100%;"></a></div><code class=3D"language-rust ignore does_not=
_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: aut=
o; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sourc=
e Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sa=
ns Mono&quot;, monospace, monospace !important;"><span class=3D"boring" sty=
le=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, =
0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// d=
o something with line</span>
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><div class=3D"ferris-container" style=3D"position: absolute; z-index: 99; =
right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org/book/ch00-00-i=
ntroduction.html#ferris" target=3D"_blank" style=3D"text-decoration-line: n=
one;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/does_not_compil=
e.svg" title=3D"This code does not compile!" class=3D"ferris ferris-large" =
style=3D"vertical-align: top; margin-left: 0.2em; height: auto; width: 4.5e=
m; max-width: 100%;"></a></div><code class=3D"language-rust ignore does_not=
_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: aut=
o; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sourc=
e Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sa=
ns Mono&quot;, monospace, monospace !important;"><span class=3D"boring" sty=
le=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, =
0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">// d=
o something with line</span>
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><div class=3D"ferris-container" style=3D"position: absolute; z-index: 99; =
right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org/book/ch00-00-i=
ntroduction.html#ferris" target=3D"_blank" style=3D"text-decoration-line: n=
one;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/does_not_compil=
e.svg" title=3D"This code does not compile!" class=3D"ferris ferris-large" =
style=3D"vertical-align: top; margin-left: 0.2em; height: auto; width: 4.5e=
m; max-width: 100%;"></a></div><code class=3D"language-rust ignore does_not=
_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: aut=
o; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sourc=
e Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sa=
ns Mono&quot;, monospace, monospace !important;"><span class=3D"boring" sty=
le=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, =
0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> line.contains(query) {
            <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">=
// do something with line</span>
        }
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><div class=3D"ferris-container" style=3D"position: absolute; z-index: 99; =
right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org/book/ch00-00-i=
ntroduction.html#ferris" target=3D"_blank" style=3D"text-decoration-line: n=
one;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/does_not_compil=
e.svg" title=3D"This code does not compile!" class=3D"ferris ferris-large" =
style=3D"vertical-align: top; margin-left: 0.2em; height: auto; width: 4.5e=
m; max-width: 100%;"></a></div><code class=3D"language-rust ignore does_not=
_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: aut=
o; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sourc=
e Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sa=
ns Mono&quot;, monospace, monospace !important;"><span class=3D"boring" sty=
le=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, =
0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> line.contains(query) {
            <span class=3D"hljs-comment" style=3D"color: rgb(87, 87, 87);">=
// do something with line</span>
        }
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code clas=
s=3D"language-rust ignore does_not_compile hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><c=
ode class=3D"language-rust ignore does_not_compile hljs" style=3D"font-size=
: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246)=
; padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot=
;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospa=
ce !important;"><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; dis=
play: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5=
em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&q=
uot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;=
"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywor=
d" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mut</sp=
an> results =3D <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, =
0);">Vec</span>::new();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> line.contains(query) {
            results.push(line);
        }
    }

    results
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; dis=
play: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5=
em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&q=
uot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;=
"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywor=
d" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code><code =
class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; display: b=
lock; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; fon=
t-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, M=
enlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span=
 class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=3D"=
language-rust ignore hljs" style=3D"font-size: 0.875em; display: block; ove=
rflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family:=
 &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &qu=
ot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D=
"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search</span></span>&lt;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span>&gt;(query: &amp;<span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">str</span>, contents: &amp;<=
span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>) -&gt=
; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span=
>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</=
span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</=
span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mut</sp=
an> results =3D <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, =
0);">Vec</span>::new();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> line.contains(query) {
            results.push(line);
        }
    }

    results
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875em; dis=
play: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5=
em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&q=
uot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;=
"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keywor=
d" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <=
span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&l=
t;<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span=
> Error&gt;&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)?;

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> search(&amp;config.query, &amp;contents) {
        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">pri=
ntln!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
{}"</span>, line);
    }

    <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span=
>(())
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span></code><div><span class=3D"boring" style=3D"opacity: 0.6;"><br></spa=
n></div></pre></th></tr></tbody></table><br></div><div><br style=3D"font-fa=
mily: arial, sans-serif; font-size: 15px; font-weight: 700; background-colo=
r: rgb(255, 255, 255);"></div></div><div><div><table class=3D"ws-table-all"=
 id=3D"customers" style=3D"box-sizing: inherit; border-collapse: collapse; =
border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); m=
argin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-=
size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing:=
 inherit; border-bottom: 1px solid rgb(221, 221, 221); background-color: rg=
b(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-w=
eight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 1=
00; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><butt=
on class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><code class=3D"language-rust ignore hljs" style=3D"font-siz=
e: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246=
); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quo=
t;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monosp=
ace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::error:=
:Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">run</span></span>(config: Config) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;(), <=
span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Box</span>&l=
t;<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">dyn</span=
> Error&gt;&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> contents =3D fs::read_to_string(config.filename)?;

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> search(&amp;config.query, &amp;contents) {
        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">pri=
ntln!</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
{}"</span>, line);
    }

    <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span=
>(())
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">on=
e_result</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span></code><div><span class=3D"boring" style=3D"opacity: 0.6;"><br></spa=
n></div></pre></th><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-w=
eight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 1=
00; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><butt=
on class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><div class=3D"ferris-container" style=3D"position: absolute=
; z-index: 99; right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org=
/book/ch00-00-introduction.html#ferris" target=3D"_blank" style=3D"text-dec=
oration-line: none;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/=
does_not_compile.svg" title=3D"This code does not compile!" class=3D"ferris=
 ferris-large" style=3D"vertical-align: top; margin-left: 0.2em; height: au=
to; width: 4.5em; max-width: 100%;"></a></div><code class=3D"language-rust =
ignore does_not_compile hljs" style=3D"font-size: 0.875em; display: block; =
overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-fami=
ly: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, =
&quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=
=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"c=
olor: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> search(&amp;=
config.query, &amp;contents) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[cfg(te=
st)]</span>
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mod</span> =
tests {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</sp=
an> super::*;

    <span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[test]</sp=
an>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">case_sensitive</span></span>() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"duct"</span>;
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> contents =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130=
, 0);">"\
Rust:
safe, fast, productive.
Pick three.
Duct tape."</span>;

        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">ass=
ert_eq!</span>(<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0=
);">vec!</span>[<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"safe, fast, productive."</span>], search(query, contents));
    }

    <span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[test]</sp=
an>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">case_insensitive</span></span>() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"rUsT"</span>;
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> contents =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130=
, 0);">"\
Rust:
safe, fast, productive.
Pick three.
Trust me."</span>;

        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">ass=
ert_eq!</span>(
            <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);"=
>vec!</span>[<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
Rust:"</span>, <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);"=
>"Trust me."</span>],
            search_case_insensitive(query, contents)
        );
    }
}</code></pre></th></tr></tbody></table><br></div><div><br style=3D"font-fa=
mily: arial, sans-serif; font-size: 15px; font-weight: 700; background-colo=
r: rgb(255, 255, 255);"></div></div><div><div><table class=3D"ws-table-all"=
 id=3D"customers" style=3D"box-sizing: inherit; border-collapse: collapse; =
border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); m=
argin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-=
size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing:=
 inherit; border-bottom: 1px solid rgb(221, 221, 221); background-color: rg=
b(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-w=
eight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 1=
00; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><butt=
on class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><div class=3D"ferris-container" style=3D"position: absolute=
; z-index: 99; right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org=
/book/ch00-00-introduction.html#ferris" target=3D"_blank" style=3D"text-dec=
oration-line: none;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/=
does_not_compile.svg" title=3D"This code does not compile!" class=3D"ferris=
 ferris-large" style=3D"vertical-align: top; margin-left: 0.2em; height: au=
to; width: 4.5em; max-width: 100%;"></a></div><code class=3D"language-rust =
ignore does_not_compile hljs" style=3D"font-size: 0.875em; display: block; =
overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-fami=
ly: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, =
&quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=
=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"c=
olor: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> search(&amp;=
config.query, &amp;contents) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore does_not_compile hljs" style=3D"font-size:=
 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246);=
 padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;=
Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospac=
e !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></=
code><code class=3D"language-rust ignore does_not_compile hljs" style=3D"fo=
nt-size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 24=
7, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas=
, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, =
monospace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><br><=
/span></code><code class=3D"language-rust ignore does_not_compile hljs" sty=
le=3D"font-size: 0.875em; display: block; overflow-x: auto; background: rgb=
(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, =
Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, mon=
ospace, monospace !important;"><span class=3D"boring" style=3D"opacity: 0.6=
;"><br></span></code><code class=3D"language-rust ignore does_not_compile h=
ljs" style=3D"font-size: 0.875em; display: block; overflow-x: auto; backgro=
und: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro=
&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&qu=
ot;, monospace, monospace !important;"><span class=3D"boring" style=3D"opac=
ity: 0.6;"><br></span></code><code class=3D"language-rust ignore does_not_c=
ompile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: auto;=
 background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source =
Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans=
 Mono&quot;, monospace, monospace !important;"><span class=3D"boring" style=
=3D"opacity: 0.6;"><br></span></code><code class=3D"language-rust ignore do=
es_not_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-=
x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot=
;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;Dej=
aVu Sans Mono&quot;, monospace, monospace !important;"><span class=3D"borin=
g" style=3D"opacity: 0.6;"><br></span></code><code class=3D"language-rust i=
gnore does_not_compile hljs" style=3D"font-size: 0.875em; display: block; o=
verflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-famil=
y: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &=
quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=
=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=3D"langua=
ge-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em; display:=
 block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; f=
ont-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;,=
 Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><sp=
an class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code class=
=3D"language-rust ignore does_not_compile hljs" style=3D"font-size: 0.875em=
; display: block; overflow-x: auto; background: rgb(246, 247, 246); padding=
: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu M=
ono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impor=
tant;"><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[cfg(te=
st)]</span>
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mod</span> =
tests {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</sp=
an> super::*;

    <span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[test]</sp=
an>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">case_sensitive</span></span>() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"duct"</span>;
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> contents =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130=
, 0);">"\
Rust:
safe, fast, productive.
Pick three.
Duct tape."</span>;

        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">ass=
ert_eq!</span>(<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0=
);">vec!</span>[<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);=
">"safe, fast, productive."</span>], search(query, contents));
    }

    <span class=3D"hljs-meta" style=3D"color: rgb(178, 30, 0);">#[test]</sp=
an>
    <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">case_insensitive</span></span>() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"rUsT"</span>;
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> contents =3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130=
, 0);">"\
Rust:
safe, fast, productive.
Pick three.
Trust me."</span>;

        <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">ass=
ert_eq!</span>(
            <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);"=
>vec!</span>[<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"=
Rust:"</span>, <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);"=
>"Trust me."</span>],
            search_case_insensitive(query, contents)
        );
    }
}</code></pre></th><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-w=
eight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 1=
00; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><butt=
on class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><code class=3D"language-rust noplayground hljs" style=3D"fo=
nt-size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 24=
7, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas=
, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, =
monospace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><span=
 class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::=
error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> search(&amp;=
config.query, &amp;contents) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search_case_insensitive</span></span>&lt;<span class=
=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span>&gt;(
    query: &amp;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, =
0);">str</span>,
    contents: &amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, =
0);">'a</span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0=
);">str</span>,
) -&gt; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec=
</span>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);=
">'a</span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);"=
>str</span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> query =3D query.to_lowercase();
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mut</sp=
an> results =3D <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, =
0);">Vec</span>::new();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> line.to_lowercase().contains(&amp;query) {
            results.push(line);
        }
    }

    results
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_sensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Duct tape."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_insensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"rUsT"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Trust me."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<span cl=
ass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Rust:"</span>, <span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Trust me."</span>],
</span><span class=3D"boring" style=3D"opacity: 0.6;">            search_ca=
se_insensitive(query, contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        );
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><code class=3D"language-rust noplayground hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-=
keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code><code =
class=3D"language-rust noplayground hljs" style=3D"font-size: 0.875em; disp=
lay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5e=
m; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&qu=
ot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"=
><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> search(&amp;=
config.query, &amp;contents) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust noplayground hljs" style=3D"font-size: 0.875em; d=
isplay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0=
.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono=
&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !importan=
t;"><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code =
class=3D"language-rust noplayground hljs" style=3D"font-size: 0.875em; disp=
lay: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5e=
m; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&qu=
ot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"=
><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><code cla=
ss=3D"language-rust noplayground hljs" style=3D"font-size: 0.875em; display=
: block; overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; =
font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;=
, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><s=
pan class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">search_case_insensitive</span></span>&lt;<span class=
=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span>&gt;(
    query: &amp;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, =
0);">str</span>,
    contents: &amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, =
0);">'a</span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0=
);">str</span>,
) -&gt; <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec=
</span>&lt;&amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);=
">'a</span> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);"=
>str</span>&gt; {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> query =3D query.to_lowercase();
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">mut</sp=
an> results =3D <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, =
0);">Vec</span>::new();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">for</sp=
an> line <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in=
</span> contents.lines() {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> line.to_lowercase().contains(&amp;query) {
            results.push(line);
        }
    }

    results
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_sensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Duct tape."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_insensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"rUsT"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Trust me."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<span cl=
ass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Rust:"</span>, <span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Trust me."</span>],
</span><span class=3D"boring" style=3D"opacity: 0.6;">            search_ca=
se_insensitive(query, contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        );
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><div class=3D"ferris-container" style=3D"position: absolute; z-index: 99; =
right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org/book/ch00-00-i=
ntroduction.html#ferris" target=3D"_blank" style=3D"text-decoration-line: n=
one;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/does_not_compil=
e.svg" title=3D"This code does not compile!" class=3D"ferris ferris-large" =
style=3D"vertical-align: top; margin-left: 0.2em; height: auto; width: 4.5e=
m; max-width: 100%;"></a></div><code class=3D"language-rust ignore does_not=
_compile hljs" style=3D"font-size: 0.875em; display: block; overflow-x: aut=
o; background: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Sourc=
e Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sa=
ns Mono&quot;, monospace, monospace !important;"><span class=3D"boring" sty=
le=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, =
0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-class"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">struct</span> <span class=3D"hljs-title" style=3D"co=
lor: rgb(0, 48, 242);">Config</span></span> {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> query: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
String</span>,
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> filename: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> ignore_case: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30,=
 0);">bool</span>,
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> results =3D <span=
 class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> config=
.ignore_case {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        search_case_i=
nsensitive(&amp;config.query, &amp;contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">    } <span class=3D"=
hljs-keyword" style=3D"color: rgb(157, 0, 236);">else</span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        search(&amp;c=
onfig.query, &amp;contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">    };
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> results {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
_case_insensitive</span></span>&lt;<span class=3D"hljs-symbol" style=3D"col=
or: rgb(0, 130, 0);">'a</span>&gt;(
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: &amp;<span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    contents: &amp;<s=
pan class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span =
class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<sp=
an class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D query.t=
o_lowercase();
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.to_lowe=
rcase().contains(&amp;query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_sensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Duct tape."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_insensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"rUsT"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Trust me."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<span cl=
ass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Rust:"</span>, <span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Trust me."</span>],
</span><span class=3D"boring" style=3D"opacity: 0.6;">            search_ca=
se_insensitive(query, contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        );
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><div><table class=3D"ws-table-all"=
 id=3D"customers" style=3D"box-sizing: inherit; border-collapse: collapse; =
border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); m=
argin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-=
size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing:=
 inherit; border-bottom: 1px solid rgb(221, 221, 221); background-color: rg=
b(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/lib.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-w=
eight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: 1=
00; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><butt=
on class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><div class=3D"ferris-container" style=3D"position: absolute=
; z-index: 99; right: 5px; top: 30px;"><a href=3D"https://doc.rust-lang.org=
/book/ch00-00-introduction.html#ferris" target=3D"_blank" style=3D"text-dec=
oration-line: none;"><img src=3D"https://doc.rust-lang.org/book/img/ferris/=
does_not_compile.svg" title=3D"This code does not compile!" class=3D"ferris=
 ferris-large" style=3D"vertical-align: top; margin-left: 0.2em; height: au=
to; width: 4.5em; max-width: 100%;"></a></div><code class=3D"language-rust =
ignore does_not_compile hljs" style=3D"font-size: 0.875em; display: block; =
overflow-x: auto; background: rgb(246, 247, 246); padding: 0.5em; font-fami=
ly: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, =
&quot;DejaVu Sans Mono&quot;, monospace, monospace !important;"><span class=
=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword" style=3D"c=
olor: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore does_not_compile hljs" style=3D"font-size:=
 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246);=
 padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;=
Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospac=
e !important;"><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub<=
/span> <span class=3D"hljs-class"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">struct</span> <span class=3D"hljs-title" style=3D"co=
lor: rgb(0, 48, 242);">Config</span></span> {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> query: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">=
String</span>,
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> filename: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0)=
;">String</span>,
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> ignore_case: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30,=
 0);">bool</span>,
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">impl</span> Config {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ne=
w</span></span>(args: &amp;[<span class=3D"hljs-built_in" style=3D"color: r=
gb(178, 30, 0);">String</span>]) -&gt; <span class=3D"hljs-built_in" style=
=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &amp;<span class=3D"h=
ljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</span> <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> args.len() &=
lt; <span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">3</span> =
{
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">return</span> <span =
class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span>(<span c=
lass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"not enough arguments=
"</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D a=
rgs[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>]=
.clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> filename =
=3D args[<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">2</s=
pan>].clone();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(Config { quer=
y, filename })
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></code><co=
de class=3D"language-rust ignore does_not_compile hljs" style=3D"font-size:=
 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246);=
 padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;=
Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospac=
e !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><br></span></=
code><code class=3D"language-rust ignore does_not_compile hljs" style=3D"fo=
nt-size: 0.875em; display: block; overflow-x: auto; background: rgb(246, 24=
7, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas=
, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, =
monospace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><br><=
/span></code><code class=3D"language-rust ignore does_not_compile hljs" sty=
le=3D"font-size: 0.875em; display: block; overflow-x: auto; background: rgb=
(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, =
Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, mon=
ospace, monospace !important;"><span class=3D"boring" style=3D"opacity: 0.6=
;"><br></span></code><code class=3D"language-rust ignore does_not_compile h=
ljs" style=3D"font-size: 0.875em; display: block; overflow-x: auto; backgro=
und: rgb(246, 247, 246); padding: 0.5em; font-family: &quot;Source Code Pro=
&quot;, Consolas, &quot;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&qu=
ot;, monospace, monospace !important;"><span class=3D"boring" style=3D"opac=
ity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> results =3D <span=
 class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> config=
.ignore_case {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        search_case_i=
nsensitive(&amp;config.query, &amp;contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">    } <span class=3D"=
hljs-keyword" style=3D"color: rgb(157, 0, 236);">else</span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        search(&amp;c=
onfig.query, &amp;contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">    };
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> results {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
_case_insensitive</span></span>&lt;<span class=3D"hljs-symbol" style=3D"col=
or: rgb(0, 130, 0);">'a</span>&gt;(
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: &amp;<span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    contents: &amp;<s=
pan class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span =
class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<sp=
an class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D query.t=
o_lowercase();
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.to_lowe=
rcase().contains(&amp;query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_sensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Duct tape."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_insensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"rUsT"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Trust me."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<span cl=
ass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Rust:"</span>, <span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Trust me."</span>],
</span><span class=3D"boring" style=3D"opacity: 0.6;">            search_ca=
se_insensitive(query, contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        );
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/lib.rs</span>=
</p><pre style=3D"position: relative; font-size: 16px; font-weight: 400;"><=
div class=3D"buttons" style=3D"position: absolute; z-index: 100; right: 5px=
; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=3D"fa=
 fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy to cli=
pboard" style=3D"font-style: normal; font-variant: normal; font-weight: nor=
mal; font-stretch: normal; line-height: 1; font-family: FontAwesome; font-s=
ize: inherit; -webkit-font-smoothing: antialiased; background-image: initia=
l; background-position: initial; background-size: initial; background-repea=
t: initial; background-attachment: initial; background-origin: initial; bac=
kground-clip: initial; border-width: initial; border-style: none; border-co=
lor: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"position:=
 absolute; visibility: hidden; color: rgb(255, 255, 255); background-color:=
 rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px; font=
-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5px 8px=
; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" title=3D"H=
ide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; font-vari=
ant: normal; font-weight: normal; font-stretch: normal; line-height: 1; fon=
t-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: antialia=
sed; background-image: initial; background-position: initial; background-si=
ze: initial; background-repeat: initial; background-attachment: initial; ba=
ckground-origin: initial; background-clip: initial; border-width: initial; =
border-style: none; border-color: initial; cursor: inherit;"></button></div=
><code class=3D"language-rust noplayground hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use=
</span> std::env;

<span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">use</span> std::error::Error;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::fs;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-c=
lass"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">struc=
t</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">Confi=
g</span></span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> query: <span clas=
s=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> filename: <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">pub</span> ignore_case: <spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">bool</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">impl=
</span> Config {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">pub</sp=
an> <span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"col=
or: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color:=
 rgb(0, 48, 242);">new</span></span>(args: &amp;[<span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">String</span>]) -&gt; <span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">Result</span>&lt;Config, &=
amp;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'static</s=
pan> <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</s=
pan>&gt; {
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if<=
/span> args.len() &lt; <span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">3</span> {
            <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);"=
>return</span> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0)=
;">Err</span>(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">=
"not enough arguments"</span>);
        }

        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> query =3D args[<span class=3D"hljs-number" style=3D"color: rgb(178,=
 30, 0);">1</span>].clone();
        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> filename =3D args[<span class=3D"hljs-number" style=3D"color: rgb(1=
78, 30, 0);">2</span>].clone();

        <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let=
</span> ignore_case =3D env::var(<span class=3D"hljs-string" style=3D"color=
: rgb(0, 130, 0);">"IGNORE_CASE"</span>).is_ok();

        <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Ok</=
span>(Config {
            query,
            filename,
            ignore_case,
        })
    }
}
<span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">run</s=
pan></span>(config: Config) -&gt; <span class=3D"hljs-built_in" style=3D"co=
lor: rgb(178, 30, 0);">Result</span>&lt;(), <span class=3D"hljs-built_in" s=
tyle=3D"color: rgb(178, 30, 0);">Box</span>&lt;<span class=3D"hljs-keyword"=
 style=3D"color: rgb(157, 0, 236);">dyn</span> Error&gt;&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =3D fs::=
read_to_string(config.filename)?;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> results =3D <span=
 class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> config=
.ignore_case {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        search_case_i=
nsensitive(&amp;config.query, &amp;contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">    } <span class=3D"=
hljs-keyword" style=3D"color: rgb(157, 0, 236);">else</span> {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        search(&amp;c=
onfig.query, &amp;contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">    };
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> results {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"{}"</span>, line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-literal" style=3D"color: rgb(178, 30, 0);">Ok</span>(())
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
</span></span>&lt;<span class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0=
);">'a</span>&gt;(query: &amp;<span class=3D"hljs-built_in" style=3D"color:=
 rgb(178, 30, 0);">str</span>, contents: &amp;<span class=3D"hljs-symbol" s=
tyle=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-built_in" sty=
le=3D"color: rgb(178, 30, 0);">str</span>) -&gt; <span class=3D"hljs-built_=
in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<span class=3D"hlj=
s-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span class=3D"hljs-bu=
ilt_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.contain=
s(query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">pub</span> <span class=3D"hljs-f=
unction"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">fn=
</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">search=
_case_insensitive</span></span>&lt;<span class=3D"hljs-symbol" style=3D"col=
or: rgb(0, 130, 0);">'a</span>&gt;(
</span><span class=3D"boring" style=3D"opacity: 0.6;">    query: &amp;<span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">    contents: &amp;<s=
pan class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span =
class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>,
</span><span class=3D"boring" style=3D"opacity: 0.6;">) -&gt; <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;&amp;<sp=
an class=3D"hljs-symbol" style=3D"color: rgb(0, 130, 0);">'a</span> <span c=
lass=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">str</span>&gt; {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D query.t=
o_lowercase();
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">mut</span> results =3D <span=
 class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>::new(=
);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">for</span> line <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">in</span> contents.lin=
es() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</span> line.to_lowe=
rcase().contains(&amp;query) {
</span><span class=3D"boring" style=3D"opacity: 0.6;">            results.p=
ush(line);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        }
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    results
</span><span class=3D"boring" style=3D"opacity: 0.6;">}
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-m=
eta" style=3D"color: rgb(178, 30, 0);">#[cfg(test)]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">mod</span> tests {
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">use</span> super::*;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_sensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"duct"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Duct tape."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(<spa=
n class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<sp=
an class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"safe, fast, prod=
uctive."</span>], search(query, contents));
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-meta" style=3D"color: rgb(178, 30, 0);">#[test]</span>
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-function"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);=
">fn</span> <span class=3D"hljs-title" style=3D"color: rgb(0, 48, 242);">ca=
se_insensitive</span></span>() {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> query =3D <=
span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"rUsT"</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</span> contents =
=3D <span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"\
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Rust:
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">safe, fast, productive.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Pick three.
</span></span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D=
"hljs-string" style=3D"color: rgb(0, 130, 0);">Trust me."</span>;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">assert_eq!</span>(
</span><span class=3D"boring" style=3D"opacity: 0.6;">            <span cla=
ss=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">vec!</span>[<span cl=
ass=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Rust:"</span>, <span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Trust me."</span>],
</span><span class=3D"boring" style=3D"opacity: 0.6;">            search_ca=
se_insensitive(query, contents)
</span><span class=3D"boring" style=3D"opacity: 0.6;">        );
</span><span class=3D"boring" style=3D"opacity: 0.6;">    }
</span><span class=3D"boring" style=3D"opacity: 0.6;">}</span></code></pre>=
</th></tr></tbody></table><br></div><div><br style=3D"font-family: arial, s=
ans-serif; font-size: 15px; font-weight: 700; background-color: rgb(255, 25=
5, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"custome=
rs" style=3D"box-sizing: inherit; border-collapse: collapse; border-spacing=
: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0p=
x; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><=
tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; bord=
er-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 25=
5);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; vert=
ical-align: top; border: 1px solid rgb(221, 221, 221);"><p style=3D"line-he=
ight: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif; font-size: 16=
px; font-weight: 400;"><span class=3D"filename">Filename: src/main.rs</span=
></p><p style=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, s=
ans-serif; font-size: 16px; font-weight: 400;"><span class=3D"filename"></s=
pan></p><pre style=3D"position: relative; font-size: 16px; font-weight: 400=
;"><div class=3D"buttons" style=3D"position: absolute; z-index: 100; right:=
 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><button class=
=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=3D"Copy =
to clipboard" style=3D"font-style: normal; font-variant: normal; font-weigh=
t: normal; font-stretch: normal; line-height: 1; font-family: FontAwesome; =
font-size: inherit; -webkit-font-smoothing: antialiased; background-image: =
initial; background-position: initial; background-size: initial; background=
-repeat: initial; background-attachment: initial; background-origin: initia=
l; background-clip: initial; border-width: initial; border-style: none; bor=
der-color: initial; cursor: inherit;"><i class=3D"tooltiptext" style=3D"pos=
ition: absolute; visibility: hidden; color: rgb(255, 255, 255); background-=
color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; top: -35px=
; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: 5px 5px 5=
px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-slash" titl=
e=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: normal; fon=
t-variant: normal; font-weight: normal; font-stretch: normal; line-height: =
1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoothing: an=
tialiased; background-image: initial; background-position: initial; backgro=
und-size: initial; background-repeat: initial; background-attachment: initi=
al; background-origin: initial; background-clip: initial; border-width: ini=
tial; border-style: none; border-color: initial; cursor: inherit;"></button=
></div><code class=3D"language-rust ignore hljs" style=3D"font-size: 0.875e=
m; display: block; overflow-x: auto; background: rgb(246, 247, 246); paddin=
g: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quot;Ubuntu =
Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monospace !impo=
rtant;"><span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use=
</span> std::env;
<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> =
std::process;

<span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> =
minigrep::Config;

<span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"color: =
rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"color: rgb=
(0, 48, 242);">main</span></span>() {
<span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hljs-keyw=
ord" style=3D"color: rgb(157, 0, 236);">let</span> args: <span class=3D"hlj=
s-built_in" style=3D"color: rgb(178, 30, 0);">Vec</span>&lt;<span class=3D"=
hljs-built_in" style=3D"color: rgb(178, 30, 0);">String</span>&gt; =3D env:=
:args().collect();
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-keyword" style=3D"color: rgb(157, 0, 236);">let</span> config =3D Config=
::new(&amp;args).unwrap_or_else(|err| {
</span><span class=3D"boring" style=3D"opacity: 0.6;">        <span class=
=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span =
class=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Problem parsing arg=
uments: {}"</span>, err);
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    });
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"Searching for {}"</span>=
, config.query);
</span><span class=3D"boring" style=3D"opacity: 0.6;">    <span class=3D"hl=
js-built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=
=3D"hljs-string" style=3D"color: rgb(0, 130, 0);">"In file {}"</span>, conf=
ig.filename);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span>    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">=
if</span> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">l=
et</span> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Er=
r</span>(e) =3D minigrep::run(config) {
<span class=3D"boring" style=3D"opacity: 0.6;">        <span class=3D"hljs-=
built_in" style=3D"color: rgb(178, 30, 0);">println!</span>(<span class=3D"=
hljs-string" style=3D"color: rgb(0, 130, 0);">"Application error: {}"</span=
>, e);
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;">        process::exit=
(<span class=3D"hljs-number" style=3D"color: rgb(178, 30, 0);">1</span>);
</span>    }
}</code></pre></th><th style=3D"box-sizing: inherit; padding: 8px; text-ali=
gn: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><p st=
yle=3D"line-height: 1.45em; font-family: &quot;Open Sans&quot;, sans-serif;=
 font-size: 16px; font-weight: 400;"><span class=3D"filename">Filename: src=
/main.rs</span></p><pre style=3D"position: relative; font-size: 16px; font-=
weight: 400;"><div class=3D"buttons" style=3D"position: absolute; z-index: =
100; right: 5px; top: 5px; color: var(--sidebar-fg); cursor: pointer;"><but=
ton class=3D"fa fa-copy clip-button" title=3D"Copy to clipboard" aria-label=
=3D"Copy to clipboard" style=3D"font-style: normal; font-variant: normal; f=
ont-weight: normal; font-stretch: normal; line-height: 1; font-family: Font=
Awesome; font-size: inherit; -webkit-font-smoothing: antialiased; backgroun=
d-image: initial; background-position: initial; background-size: initial; b=
ackground-repeat: initial; background-attachment: initial; background-origi=
n: initial; background-clip: initial; border-width: initial; border-style: =
none; border-color: initial; cursor: inherit;"><i class=3D"tooltiptext" sty=
le=3D"position: absolute; visibility: hidden; color: rgb(255, 255, 255); ba=
ckground-color: rgb(51, 51, 51); transform: translateX(-50%); left: -8px; t=
op: -35px; font-size: 0.8em; border-radius: 6px; padding: 5px 8px; margin: =
5px 5px 5px 8px; z-index: 1000;"></i></button><button class=3D"fa fa-eye-sl=
ash" title=3D"Hide lines" aria-label=3D"Hide lines" style=3D"font-style: no=
rmal; font-variant: normal; font-weight: normal; font-stretch: normal; line=
-height: 1; font-family: FontAwesome; font-size: inherit; -webkit-font-smoo=
thing: antialiased; background-image: initial; background-position: initial=
; background-size: initial; background-repeat: initial; background-attachme=
nt: initial; background-origin: initial; background-clip: initial; border-w=
idth: initial; border-style: none; border-color: initial; cursor: inherit;"=
></button></div><code class=3D"language-rust ignore hljs" style=3D"font-siz=
e: 0.875em; display: block; overflow-x: auto; background: rgb(246, 247, 246=
); padding: 0.5em; font-family: &quot;Source Code Pro&quot;, Consolas, &quo=
t;Ubuntu Mono&quot;, Menlo, &quot;DejaVu Sans Mono&quot;, monospace, monosp=
ace !important;"><span class=3D"boring" style=3D"opacity: 0.6;"><span class=
=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">use</span> std::env;
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> std::process;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"boring" style=3D"opacity: 0.6;"><span class=3D"hljs-k=
eyword" style=3D"color: rgb(157, 0, 236);">use</span> minigrep::Config;
</span><span class=3D"boring" style=3D"opacity: 0.6;">
</span><span class=3D"hljs-function"><span class=3D"hljs-keyword" style=3D"=
color: rgb(157, 0, 236);">fn</span> <span class=3D"hljs-title" style=3D"col=
or: rgb(0, 48, 242);">main</span></span>() {
    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> args: <span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);">V=
ec</span>&lt;<span class=3D"hljs-built_in" style=3D"color: rgb(178, 30, 0);=
">String</span>&gt; =3D env::args().collect();

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</sp=
an> config =3D Config::new(&amp;args).unwrap_or_else(|err| {
        eprintln!(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"Problem parsing arguments: {}"</span>, err);
        process::exit(<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">1</span>);
    });

    <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">if</spa=
n> <span class=3D"hljs-keyword" style=3D"color: rgb(157, 0, 236);">let</spa=
n> <span class=3D"hljs-literal" style=3D"color: rgb(178, 30, 0);">Err</span=
>(e) =3D minigrep::run(config) {
        eprintln!(<span class=3D"hljs-string" style=3D"color: rgb(0, 130, 0=
);">"Application error: {}"</span>, e);

        process::exit(<span class=3D"hljs-number" style=3D"color: rgb(178, =
30, 0);">1</span>);
    }
}</code></pre></th></tr></tbody></table>done</div><div><br></div></div><div=
><div><table class=3D"ws-table-all" id=3D"customers" style=3D"box-sizing: i=
nherit; border-collapse: collapse; border-spacing: 0px; width: 1246px; bord=
er: 1px solid rgb(204, 204, 204); margin: 20px 0px; font-family: arial, san=
s-serif; color: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"box-sizing:=
 inherit;"><tr style=3D"box-sizing: inherit; border-bottom: 1px solid rgb(2=
21, 221, 221); background-color: rgb(255, 255, 255);"><th style=3D"box-sizi=
ng: inherit; padding: 8px; text-align: left; vertical-align: top; border: 1=
px solid rgb(221, 221, 221);"><br></th><th style=3D"box-sizing: inherit; pa=
dding: 8px; text-align: left; vertical-align: top; border: 1px solid rgb(22=
1, 221, 221);"><br></th></tr></tbody></table><br></div><div><br style=3D"fo=
nt-family: arial, sans-serif; font-size: 15px; font-weight: 700; background=
-color: rgb(255, 255, 255);"></div></div><div><div><table class=3D"ws-table=
-all" id=3D"customers" style=3D"box-sizing: inherit; border-collapse: colla=
pse; border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 20=
4); margin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); =
font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-si=
zing: inherit; border-bottom: 1px solid rgb(221, 221, 221); background-colo=
r: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; tex=
t-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);">=
<br></th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left; =
vertical-align: top; border: 1px solid rgb(221, 221, 221);"><br></th></tr><=
/tbody></table><br></div><div><br style=3D"font-family: arial, sans-serif; =
font-size: 15px; font-weight: 700; background-color: rgb(255, 255, 255);"><=
/div></div><div><div><table class=3D"ws-table-all" id=3D"customers" style=
=3D"box-sizing: inherit; border-collapse: collapse; border-spacing: 0px; wi=
dth: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0px; font-f=
amily: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><tbody sty=
le=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; border-bottom=
: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 255);"><th =
style=3D"box-sizing: inherit; padding: 8px; text-align: left; vertical-alig=
n: top; border: 1px solid rgb(221, 221, 221);"><br></th><th style=3D"box-si=
zing: inherit; padding: 8px; text-align: left; vertical-align: top; border:=
 1px solid rgb(221, 221, 221);"><br></th></tr></tbody></table><br></div><di=
v><br style=3D"font-family: arial, sans-serif; font-size: 15px; font-weight=
: 700; background-color: rgb(255, 255, 255);"></div></div><div><div><table =
class=3D"ws-table-all" id=3D"customers" style=3D"box-sizing: inherit; borde=
r-collapse: collapse; border-spacing: 0px; width: 1246px; border: 1px solid=
 rgb(204, 204, 204); margin: 20px 0px; font-family: arial, sans-serif; colo=
r: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><t=
r style=3D"box-sizing: inherit; border-bottom: 1px solid rgb(221, 221, 221)=
; background-color: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; =
padding: 8px; text-align: left; vertical-align: top; border: 1px solid rgb(=
221, 221, 221);"><br></th><th style=3D"box-sizing: inherit; padding: 8px; t=
ext-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);=
"><br></th></tr></tbody></table><br></div><div><br style=3D"font-family: ar=
ial, sans-serif; font-size: 15px; font-weight: 700; background-color: rgb(2=
55, 255, 255);"></div></div><div><div><table class=3D"ws-table-all" id=3D"c=
ustomers" style=3D"box-sizing: inherit; border-collapse: collapse; border-s=
pacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, 204); margin: 2=
0px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15=
px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit=
; border-bottom: 1px solid rgb(221, 221, 221); background-color: rgb(255, 2=
55, 255);"><th style=3D"box-sizing: inherit; padding: 8px; text-align: left=
; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><br></th><th =
style=3D"box-sizing: inherit; padding: 8px; text-align: left; vertical-alig=
n: top; border: 1px solid rgb(221, 221, 221);"><br></th></tr></tbody></tabl=
e><br></div><div><br style=3D"font-family: arial, sans-serif; font-size: 15=
px; font-weight: 700; background-color: rgb(255, 255, 255);"></div></div><d=
iv><div><table class=3D"ws-table-all" id=3D"customers" style=3D"box-sizing:=
 inherit; border-collapse: collapse; border-spacing: 0px; width: 1246px; bo=
rder: 1px solid rgb(204, 204, 204); margin: 20px 0px; font-family: arial, s=
ans-serif; color: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"box-sizin=
g: inherit;"><tr style=3D"box-sizing: inherit; border-bottom: 1px solid rgb=
(221, 221, 221); background-color: rgb(255, 255, 255);"><th style=3D"box-si=
zing: inherit; padding: 8px; text-align: left; vertical-align: top; border:=
 1px solid rgb(221, 221, 221);"><br></th><th style=3D"box-sizing: inherit; =
padding: 8px; text-align: left; vertical-align: top; border: 1px solid rgb(=
221, 221, 221);"><br></th></tr></tbody></table><br></div><div><br style=3D"=
font-family: arial, sans-serif; font-size: 15px; font-weight: 700; backgrou=
nd-color: rgb(255, 255, 255);"></div></div><div><div><table class=3D"ws-tab=
le-all" id=3D"customers" style=3D"box-sizing: inherit; border-collapse: col=
lapse; border-spacing: 0px; width: 1246px; border: 1px solid rgb(204, 204, =
204); margin: 20px 0px; font-family: arial, sans-serif; color: rgb(0, 0, 0)=
; font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><tr style=3D"box-=
sizing: inherit; border-bottom: 1px solid rgb(221, 221, 221); background-co=
lor: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; padding: 8px; t=
ext-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);=
"><br></th><th style=3D"box-sizing: inherit; padding: 8px; text-align: left=
; vertical-align: top; border: 1px solid rgb(221, 221, 221);"><br></th></tr=
></tbody></table><br></div><div><br style=3D"font-family: arial, sans-serif=
; font-size: 15px; font-weight: 700; background-color: rgb(255, 255, 255);"=
></div></div><div><div><table class=3D"ws-table-all" id=3D"customers" style=
=3D"box-sizing: inherit; border-collapse: collapse; border-spacing: 0px; wi=
dth: 1246px; border: 1px solid rgb(204, 204, 204); margin: 20px 0px; font-f=
amily: arial, sans-serif; color: rgb(0, 0, 0); font-size: 15px;"><tbody sty=
le=3D"box-sizing: inherit;"><tr style=3D"box-sizing: inherit; border-bottom=
: 1px solid rgb(221, 221, 221); background-color: rgb(255, 255, 255);"><th =
style=3D"box-sizing: inherit; padding: 8px; text-align: left; vertical-alig=
n: top; border: 1px solid rgb(221, 221, 221);"><br></th><th style=3D"box-si=
zing: inherit; padding: 8px; text-align: left; vertical-align: top; border:=
 1px solid rgb(221, 221, 221);"><br></th></tr></tbody></table><br></div><di=
v><br style=3D"font-family: arial, sans-serif; font-size: 15px; font-weight=
: 700; background-color: rgb(255, 255, 255);"></div></div><div><div><table =
class=3D"ws-table-all" id=3D"customers" style=3D"box-sizing: inherit; borde=
r-collapse: collapse; border-spacing: 0px; width: 1246px; border: 1px solid=
 rgb(204, 204, 204); margin: 20px 0px; font-family: arial, sans-serif; colo=
r: rgb(0, 0, 0); font-size: 15px;"><tbody style=3D"box-sizing: inherit;"><t=
r style=3D"box-sizing: inherit; border-bottom: 1px solid rgb(221, 221, 221)=
; background-color: rgb(255, 255, 255);"><th style=3D"box-sizing: inherit; =
padding: 8px; text-align: left; vertical-align: top; border: 1px solid rgb(=
221, 221, 221);"><br></th><th style=3D"box-sizing: inherit; padding: 8px; t=
ext-align: left; vertical-align: top; border: 1px solid rgb(221, 221, 221);=
"><br></th></tr></tbody></table><br></div><div><br style=3D"font-family: ar=
ial, sans-serif; font-size: 15px; font-weight: 700; background-color: rgb(2=
55, 255, 255);"></div></div><div><br style=3D"font-family: arial, sans-seri=
f; font-size: 15px; font-weight: 700; background-color: rgb(255, 255, 255);=
"></div></div><div><br style=3D"font-family: arial, sans-serif; font-size: =
15px; font-weight: 700; background-color: rgb(255, 255, 255);"></div></div>=
<div><br style=3D"font-family: arial, sans-serif; font-size: 15px; font-wei=
ght: 700; background-color: rgb(255, 255, 255);"></div></div><div><br style=
=3D"font-family: arial, sans-serif; font-size: 15px; font-weight: 700; back=
ground-color: rgb(255, 255, 255);"></div><div><br style=3D"font-family: ari=
al, sans-serif; font-size: 15px; font-weight: 700; background-color: rgb(25=
5, 255, 255);"></div></body></html>
------MultipartBoundary--ilepjgVwes3jqCaSCwuh6f91plbKJGfsL0WtUWR5av----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://doc.rust-lang.org/book/img/ferris/does_not_compile.svg

<?xml version=3D"1.0" encoding=3D"utf-8"?>
<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version:=
 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/=
SVG/1.1/DTD/svg11.dtd">
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px"
	 width=3D"1259px" height=3D"847px" viewBox=3D"0 0 1259 847" enable-backgro=
und=3D"new 0 0 1259 847" xml:space=3D"preserve">
<!--<rect fill=3D"#FFFFFF" width=3D"1259" height=3D"847"/>-->
<path fill=3D"#8F1F1D" d=3D"M706.403,338.05c-131.633,0-251.228,15.825-339.7=
7,41.615v220.298
	c88.542,25.79,208.137,41.614,339.77,41.614c150.657,0,285.535-20.729,376.13=
4-53.402V391.457
	C991.938,358.781,857.06,338.05,706.403,338.05"/>
<path fill=3D"#8F1F1D" d=3D"M1088.423,537.442c-3.856-10.663-4.629-24.154-1.=
36-37.162c5.85-23.289,22.421-36.198,37.013-28.833
	c3.618,1.827,6.773,4.73,9.387,8.418c0.239-0.001,0.479,0,0.715,0.016c0,0,44=
.552,53.106,3.313,116.003
	c-0.896,3.569-76.534,91.718-94.043,94.524C1031.987,692.244,1058.338,600.41=
,1088.423,537.442"/>
<path fill=3D"#8F1F1D" d=3D"M357.479,527.021c5.3-9.631,7.158-22.788,4.217-3=
6.426c-5.266-24.416-23.91-41.109-41.642-37.285
	c-4.398,0.948-8.325,3.072-11.666,6.099c-0.282-0.059-0.564-0.113-0.845-0.15=
3c0,0-56.292,41.952-12.057,113.924
	c0.805,3.741,83.851,108.838,104.311,115.764C413.188,693.475,388.55,596.418=
,357.479,527.021"/>
<path fill=3D"#E23A26" d=3D"M280.467,535.066l0.007,0.015C280.659,535.226,28=
0.831,535.357,280.467,535.066"/>
<path fill=3D"#E33B26" d=3D"M1174.119,457.903c-0.88-3.064-1.756-6.126-2.662=
-9.162l30.683-44.451c3.13-4.522,3.771-10.398,1.73-15.555
	c-2.04-5.13-6.49-8.81-11.76-9.71l-51.887-8.805c-2.008-4.102-4.115-8.142-6.=
229-12.15l21.797-49.903
	c2.243-5.087,1.769-10.995-1.203-15.608c-2.961-4.636-7.99-7.344-13.349-7.13=
3l-52.656,1.913c-2.727-3.55-5.496-7.068-8.322-10.521
	l12.102-53.49c1.225-5.433-0.322-11.118-4.104-15.064c-3.762-3.932-9.229-5.5=
59-14.426-4.283l-51.289,12.608
	c-3.321-2.935-6.699-5.833-10.114-8.673l1.849-54.914c0.197-5.559-2.394-10.8=
42-6.845-13.925
	c-4.445-3.104-10.093-3.573-14.955-1.266l-47.848,22.747c-3.854-2.21-7.728-4=
.4-11.644-6.517l-8.455-54.115
	c-0.857-5.483-4.386-10.139-9.326-12.266c-4.923-2.137-10.568-1.447-14.891,1=
.808l-42.659,32.007
	c-4.2-1.395-8.419-2.732-12.692-4.011l-18.386-51.316c-1.87-5.229-6.182-9.07=
1-11.438-10.151c-5.238-1.072-10.63,0.742-14.263,4.802
	L764.97,100.97c-4.342-0.5-8.685-0.956-13.043-1.331l-27.723-46.713c-2.811-4=
.732-7.771-7.612-13.116-7.612
	c-5.334,0-10.304,2.88-13.09,7.612l-27.733,46.713c-4.358,0.375-8.722,0.831-=
13.056,1.331l-35.91-40.171
	c-3.636-4.06-9.047-5.874-14.268-4.802c-5.255,1.092-9.573,4.922-11.433,10.1=
51l-18.402,51.316
	c-4.26,1.279-8.481,2.627-12.691,4.011l-42.644-32.007c-4.336-3.266-9.98-3.9=
55-14.916-1.808c-4.919,2.127-8.461,6.783-9.313,12.266
	l-8.461,54.115c-3.914,2.117-7.789,4.294-11.653,6.517l-47.842-22.747c-4.858=
-2.316-10.529-1.838-14.954,1.266
	c-4.445,3.083-7.042,8.366-6.84,13.925l1.835,54.914c-3.405,2.84-6.774,5.738=
-10.112,8.673l-51.279-12.608
	c-5.211-1.265-10.67,0.351-14.441,4.283c-3.795,3.946-5.332,9.631-4.113,15.0=
64l12.079,53.49c-2.802,3.467-5.575,6.971-8.293,10.521
	l-52.655-1.913c-5.314-0.157-10.386,2.497-13.356,7.133c-2.974,4.613-3.425,1=
0.521-1.211,15.608l21.814,49.903
	c-2.119,4.008-4.224,8.048-6.249,12.15l-51.882,8.805c-5.271,0.888-9.715,4.5=
66-11.765,9.71c-2.037,5.157-1.375,11.033,1.735,15.555
	l30.69,44.451c-0.236,0.784-0.455,1.576-0.69,2.364l-16.863,17.911l45.341,64=
.05c0,0,435.152,200.731,838.797,3.396
	C1163.372,528.189,1174.119,457.903,1174.119,457.903"/>
<path d=3D"M788.629,436.277c0,0,54.108-46.602,95.626,11.5c0,0,29.173,74.328=
-12.593,104.708c0,0-67.353,41.473-95.627-11.5
	C776.035,540.985,739.67,497.66,788.629,436.277"/>
<path fill=3D"#FFFFFF" d=3D"M843.648,464.356c-2.452,20.385-16.456,35.467-31=
.276,33.684c-14.817-1.781-24.846-19.755-22.395-40.14
	c2.452-20.385,16.457-35.468,31.274-33.687C836.071,425.997,846.1,443.971,84=
3.648,464.356"/>
<path d=3D"M572.949,399.315c0,0,86.384-26.449,99.021,57.297c0,0,12.086,97.2=
94-79.356,91.705
	C592.613,548.317,479.508,512.09,572.949,399.315"/>
<rect x=3D"181" y=3D"45" fill=3D"none" width=3D"1060" height=3D"782"/>
<path fill=3D"#FFFFFF" d=3D"M611.925,441.324c-2.528,21.021-16.969,36.581-32=
.257,34.742c-15.281-1.837-25.624-20.378-23.095-41.399
	c2.529-21.026,16.973-36.581,32.253-34.743C604.113,401.763,614.454,420.298,=
611.925,441.324"/>
<path fill=3D"#E33B26" d=3D"M292.602,544.216c10.967-12.463,37.611-27.557,35=
.57-46.282c-3.653-33.526-31.456-57.999-62.099-54.658
	c-7.599,0.827-14.658,3.292-20.923,7.035c-0.463-0.106-0.925-0.211-1.388-0.2=
94c0,0-103.632,50.873-44.564,152.657
	c0.557,5.137,117.847,155.668,150.787,167.131C371.544,777.307,330.074,641.1=
65,292.602,544.216"/>
<path fill=3D"#E33B26" d=3D"M1134.549,539.673c-12.692-10.7-46.162-20.418-46=
.92-39.238c-1.355-33.697,22.512-62.021,53.312-63.26
	c7.638-0.308,14.983,1.083,21.734,3.857c0.442-0.174,0.884-0.347,1.329-0.497=
c0,0,110.025,34.951,66.695,144.366
	c0.21,5.163-93.468,171.416-124.345,187.635C1086.146,783.151,1111.861,641.1=
05,1134.549,539.673"/>
<rect x=3D"181.06" y=3D"45.314" fill=3D"none" width=3D"1059.75" height=3D"7=
81.686"/>
<path fill=3D"#E33B26" d=3D"M372.142,545.559c0,0-1.383,137.296,133.166,167.=
933l28.054-56.363c0,0-97.495,9.431-104.995-111.569
	H372.142"/>
<rect x=3D"181" y=3D"45" fill=3D"none" width=3D"1060" height=3D"782"/>
<path fill=3D"#E33B26" d=3D"M1057.362,537.246c0,0,1.382,137.296-133.167,167=
.933l-28.055-56.363c0,0,97.495,9.431,104.995-111.569
	H1057.362"/>
<path fill=3D"#E33B26" d=3D"M960.167,677.279c-20.25-48.941-85.595-68.373-14=
5.951-43.399c-53.126,21.98-84.637,71.031-77.624,115.845
	c41.946-0.652,86.94-3.371,130.736-9.718c0,0-25.837,41.763-63.857,78.211c25=
.566,6.599,55.383,4.768,84.076-7.104
	C947.904,786.141,980.417,726.221,960.167,677.279"/>
<path fill=3D"#E33B26" d=3D"M585.746,745.985c0,0,55.203,7.295,130.67,9.155c=
6.61-47.511-29.38-97.792-86.801-117.242
	c-63.438-21.488-128.989,2.792-146.414,54.231c-17.425,51.44,19.876,110.561,=
83.314,132.049
	c28.121,9.526,56.653,10.049,81.229,3.207C610.833,790.881,585.746,745.985,5=
85.746,745.985"/>
<rect x=3D"181.06" y=3D"45.314" fill=3D"none" width=3D"1059.75" height=3D"7=
81.686"/>
<g>
	<path style=3D"stroke:#ffffff;stroke-width:20" d=3D"M92.314,318.146l0.072-=
12.563c-0.359-24.665,8.95-49.384,31.787-73.989c16.267-18.129,29.512-33.493,=
30.216-49.411
		c0.747-16.883-9.835-28.95-33.932-30.499c-15.918-0.704-35.468,4.231-48.394=
,12.359l-14.075-53.303
		c18.296-9.34,47.182-17.729,81.429-16.214c63.672,2.816,91.538,39.33,89.768=
,79.366c-1.621,36.659-25.84,59.753-45.066,79.202
		c-18.24,19.009-26.789,37.48-27.267,59.207l-0.384,8.683L92.314,318.146z M7=
6.808,384.64c1.152-26.048,19.789-43.105,44.872-41.997
		c26.047,1.152,42.14,19.746,41.471,45.815c-1.109,25.083-18.824,43.148-45.3=
53,41.975C92.232,429.303,75.698,409.723,76.808,384.64
		z"/>
</g>
</svg>=0A
------MultipartBoundary--ilepjgVwes3jqCaSCwuh6f91plbKJGfsL0WtUWR5av------
